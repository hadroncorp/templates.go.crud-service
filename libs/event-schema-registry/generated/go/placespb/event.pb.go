// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: hadron/places/v1/event.proto

package placespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppointmentScheduledEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppointmentId string                 `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	PlaceId       string                 `protobuf:"bytes,2,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	TargetedTo    *string                `protobuf:"bytes,4,opt,name=targeted_to,json=targetedTo,proto3,oneof" json:"targeted_to,omitempty"`
	ScheduledBy   string                 `protobuf:"bytes,5,opt,name=scheduled_by,json=scheduledBy,proto3" json:"scheduled_by,omitempty"`
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	Notes         *string                `protobuf:"bytes,7,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	Status        AppointmentStatus      `protobuf:"varint,8,opt,name=status,proto3,enum=hadron.places.v1.AppointmentStatus" json:"status,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateBy      string                 `protobuf:"bytes,10,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppointmentScheduledEvent) Reset() {
	*x = AppointmentScheduledEvent{}
	mi := &file_hadron_places_v1_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppointmentScheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentScheduledEvent) ProtoMessage() {}

func (x *AppointmentScheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hadron_places_v1_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentScheduledEvent.ProtoReflect.Descriptor instead.
func (*AppointmentScheduledEvent) Descriptor() ([]byte, []int) {
	return file_hadron_places_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *AppointmentScheduledEvent) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *AppointmentScheduledEvent) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *AppointmentScheduledEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AppointmentScheduledEvent) GetTargetedTo() string {
	if x != nil && x.TargetedTo != nil {
		return *x.TargetedTo
	}
	return ""
}

func (x *AppointmentScheduledEvent) GetScheduledBy() string {
	if x != nil {
		return x.ScheduledBy
	}
	return ""
}

func (x *AppointmentScheduledEvent) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *AppointmentScheduledEvent) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *AppointmentScheduledEvent) GetStatus() AppointmentStatus {
	if x != nil {
		return x.Status
	}
	return AppointmentStatus_APPOINTMENT_STATUS_UNSPECIFIED
}

func (x *AppointmentScheduledEvent) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *AppointmentScheduledEvent) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

type AppointmentUpdatedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppointmentId string                 `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	PlaceId       string                 `protobuf:"bytes,2,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	TargetedTo    *string                `protobuf:"bytes,4,opt,name=targeted_to,json=targetedTo,proto3,oneof" json:"targeted_to,omitempty"`
	ScheduledBy   string                 `protobuf:"bytes,5,opt,name=scheduled_by,json=scheduledBy,proto3" json:"scheduled_by,omitempty"`
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	Notes         *string                `protobuf:"bytes,7,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	Status        AppointmentStatus      `protobuf:"varint,8,opt,name=status,proto3,enum=hadron.places.v1.AppointmentStatus" json:"status,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateBy      string                 `protobuf:"bytes,10,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	UpdateBy      string                 `protobuf:"bytes,12,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppointmentUpdatedEvent) Reset() {
	*x = AppointmentUpdatedEvent{}
	mi := &file_hadron_places_v1_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppointmentUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentUpdatedEvent) ProtoMessage() {}

func (x *AppointmentUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hadron_places_v1_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentUpdatedEvent.ProtoReflect.Descriptor instead.
func (*AppointmentUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_hadron_places_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *AppointmentUpdatedEvent) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *AppointmentUpdatedEvent) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *AppointmentUpdatedEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AppointmentUpdatedEvent) GetTargetedTo() string {
	if x != nil && x.TargetedTo != nil {
		return *x.TargetedTo
	}
	return ""
}

func (x *AppointmentUpdatedEvent) GetScheduledBy() string {
	if x != nil {
		return x.ScheduledBy
	}
	return ""
}

func (x *AppointmentUpdatedEvent) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *AppointmentUpdatedEvent) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *AppointmentUpdatedEvent) GetStatus() AppointmentStatus {
	if x != nil {
		return x.Status
	}
	return AppointmentStatus_APPOINTMENT_STATUS_UNSPECIFIED
}

func (x *AppointmentUpdatedEvent) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *AppointmentUpdatedEvent) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *AppointmentUpdatedEvent) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *AppointmentUpdatedEvent) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

type AppointmentCanceledEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppointmentId string                 `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	PlaceId       string                 `protobuf:"bytes,2,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	Notes         *string                `protobuf:"bytes,3,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	Status        AppointmentStatus      `protobuf:"varint,4,opt,name=status,proto3,enum=hadron.places.v1.AppointmentStatus" json:"status,omitempty"`
	CancelTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time,omitempty"`
	CancelBy      string                 `protobuf:"bytes,10,opt,name=cancel_by,json=cancelBy,proto3" json:"cancel_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppointmentCanceledEvent) Reset() {
	*x = AppointmentCanceledEvent{}
	mi := &file_hadron_places_v1_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppointmentCanceledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentCanceledEvent) ProtoMessage() {}

func (x *AppointmentCanceledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hadron_places_v1_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentCanceledEvent.ProtoReflect.Descriptor instead.
func (*AppointmentCanceledEvent) Descriptor() ([]byte, []int) {
	return file_hadron_places_v1_event_proto_rawDescGZIP(), []int{2}
}

func (x *AppointmentCanceledEvent) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *AppointmentCanceledEvent) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *AppointmentCanceledEvent) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *AppointmentCanceledEvent) GetStatus() AppointmentStatus {
	if x != nil {
		return x.Status
	}
	return AppointmentStatus_APPOINTMENT_STATUS_UNSPECIFIED
}

func (x *AppointmentCanceledEvent) GetCancelTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelTime
	}
	return nil
}

func (x *AppointmentCanceledEvent) GetCancelBy() string {
	if x != nil {
		return x.CancelBy
	}
	return ""
}

type AppointmentRescheduledEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AppointmentId  string                 `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	PlaceId        string                 `protobuf:"bytes,2,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	ScheduledTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	Notes          *string                `protobuf:"bytes,4,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	Status         AppointmentStatus      `protobuf:"varint,5,opt,name=status,proto3,enum=hadron.places.v1.AppointmentStatus" json:"status,omitempty"`
	RescheduleTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=reschedule_time,json=rescheduleTime,proto3" json:"reschedule_time,omitempty"`
	RescheduleBy   string                 `protobuf:"bytes,7,opt,name=reschedule_by,json=rescheduleBy,proto3" json:"reschedule_by,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AppointmentRescheduledEvent) Reset() {
	*x = AppointmentRescheduledEvent{}
	mi := &file_hadron_places_v1_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppointmentRescheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentRescheduledEvent) ProtoMessage() {}

func (x *AppointmentRescheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hadron_places_v1_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentRescheduledEvent.ProtoReflect.Descriptor instead.
func (*AppointmentRescheduledEvent) Descriptor() ([]byte, []int) {
	return file_hadron_places_v1_event_proto_rawDescGZIP(), []int{3}
}

func (x *AppointmentRescheduledEvent) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *AppointmentRescheduledEvent) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *AppointmentRescheduledEvent) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *AppointmentRescheduledEvent) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *AppointmentRescheduledEvent) GetStatus() AppointmentStatus {
	if x != nil {
		return x.Status
	}
	return AppointmentStatus_APPOINTMENT_STATUS_UNSPECIFIED
}

func (x *AppointmentRescheduledEvent) GetRescheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RescheduleTime
	}
	return nil
}

func (x *AppointmentRescheduledEvent) GetRescheduleBy() string {
	if x != nil {
		return x.RescheduleBy
	}
	return ""
}

type AppointmentDeletedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppointmentId string                 `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	PlaceId       string                 `protobuf:"bytes,2,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	DeleteTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	DeleteBy      string                 `protobuf:"bytes,4,opt,name=delete_by,json=deleteBy,proto3" json:"delete_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppointmentDeletedEvent) Reset() {
	*x = AppointmentDeletedEvent{}
	mi := &file_hadron_places_v1_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppointmentDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentDeletedEvent) ProtoMessage() {}

func (x *AppointmentDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hadron_places_v1_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentDeletedEvent.ProtoReflect.Descriptor instead.
func (*AppointmentDeletedEvent) Descriptor() ([]byte, []int) {
	return file_hadron_places_v1_event_proto_rawDescGZIP(), []int{4}
}

func (x *AppointmentDeletedEvent) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *AppointmentDeletedEvent) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *AppointmentDeletedEvent) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *AppointmentDeletedEvent) GetDeleteBy() string {
	if x != nil {
		return x.DeleteBy
	}
	return ""
}

type AppointmentCompletedEvent struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AppointmentId      string                 `protobuf:"bytes,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id,omitempty"`
	PlaceId            string                 `protobuf:"bytes,2,opt,name=place_id,json=placeId,proto3" json:"place_id,omitempty"`
	Status             AppointmentStatus      `protobuf:"varint,3,opt,name=status,proto3,enum=hadron.places.v1.AppointmentStatus" json:"status,omitempty"`
	CompleteTime       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	MarkedAsCompleteBy string                 `protobuf:"bytes,5,opt,name=marked_as_complete_by,json=markedAsCompleteBy,proto3" json:"marked_as_complete_by,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AppointmentCompletedEvent) Reset() {
	*x = AppointmentCompletedEvent{}
	mi := &file_hadron_places_v1_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppointmentCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentCompletedEvent) ProtoMessage() {}

func (x *AppointmentCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hadron_places_v1_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentCompletedEvent.ProtoReflect.Descriptor instead.
func (*AppointmentCompletedEvent) Descriptor() ([]byte, []int) {
	return file_hadron_places_v1_event_proto_rawDescGZIP(), []int{5}
}

func (x *AppointmentCompletedEvent) GetAppointmentId() string {
	if x != nil {
		return x.AppointmentId
	}
	return ""
}

func (x *AppointmentCompletedEvent) GetPlaceId() string {
	if x != nil {
		return x.PlaceId
	}
	return ""
}

func (x *AppointmentCompletedEvent) GetStatus() AppointmentStatus {
	if x != nil {
		return x.Status
	}
	return AppointmentStatus_APPOINTMENT_STATUS_UNSPECIFIED
}

func (x *AppointmentCompletedEvent) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

func (x *AppointmentCompletedEvent) GetMarkedAsCompleteBy() string {
	if x != nil {
		return x.MarkedAsCompleteBy
	}
	return ""
}

var File_hadron_places_v1_event_proto protoreflect.FileDescriptor

var file_hadron_places_v1_event_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x68, 0x61, 0x64, 0x72, 0x6f, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x68, 0x61, 0x64, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x68, 0x61, 0x64, 0x72, 0x6f, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb,
	0x03, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12, 0x41, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x68, 0x61,
	0x64, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xa3, 0x04, 0x0a,
	0x17, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x64, 0x72, 0x6f, 0x6e,
	0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x68,
	0x61, 0x64, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xee, 0x02,
	0x0a, 0x1b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x68, 0x61, 0x64, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xb5,
	0x01, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x22, 0x8e, 0x02, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x64, 0x72, 0x6f, 0x6e, 0x2e,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x61,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x42, 0x29, 0x5a, 0x27, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x70, 0x62, 0x3b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_hadron_places_v1_event_proto_rawDescOnce sync.Once
	file_hadron_places_v1_event_proto_rawDescData []byte
)

func file_hadron_places_v1_event_proto_rawDescGZIP() []byte {
	file_hadron_places_v1_event_proto_rawDescOnce.Do(func() {
		file_hadron_places_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_hadron_places_v1_event_proto_rawDesc), len(file_hadron_places_v1_event_proto_rawDesc)))
	})
	return file_hadron_places_v1_event_proto_rawDescData
}

var file_hadron_places_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_hadron_places_v1_event_proto_goTypes = []any{
	(*AppointmentScheduledEvent)(nil),   // 0: hadron.places.v1.AppointmentScheduledEvent
	(*AppointmentUpdatedEvent)(nil),     // 1: hadron.places.v1.AppointmentUpdatedEvent
	(*AppointmentCanceledEvent)(nil),    // 2: hadron.places.v1.AppointmentCanceledEvent
	(*AppointmentRescheduledEvent)(nil), // 3: hadron.places.v1.AppointmentRescheduledEvent
	(*AppointmentDeletedEvent)(nil),     // 4: hadron.places.v1.AppointmentDeletedEvent
	(*AppointmentCompletedEvent)(nil),   // 5: hadron.places.v1.AppointmentCompletedEvent
	(*timestamppb.Timestamp)(nil),       // 6: google.protobuf.Timestamp
	(AppointmentStatus)(0),              // 7: hadron.places.v1.AppointmentStatus
}
var file_hadron_places_v1_event_proto_depIdxs = []int32{
	6,  // 0: hadron.places.v1.AppointmentScheduledEvent.scheduled_time:type_name -> google.protobuf.Timestamp
	7,  // 1: hadron.places.v1.AppointmentScheduledEvent.status:type_name -> hadron.places.v1.AppointmentStatus
	6,  // 2: hadron.places.v1.AppointmentScheduledEvent.create_time:type_name -> google.protobuf.Timestamp
	6,  // 3: hadron.places.v1.AppointmentUpdatedEvent.scheduled_time:type_name -> google.protobuf.Timestamp
	7,  // 4: hadron.places.v1.AppointmentUpdatedEvent.status:type_name -> hadron.places.v1.AppointmentStatus
	6,  // 5: hadron.places.v1.AppointmentUpdatedEvent.create_time:type_name -> google.protobuf.Timestamp
	6,  // 6: hadron.places.v1.AppointmentUpdatedEvent.update_time:type_name -> google.protobuf.Timestamp
	7,  // 7: hadron.places.v1.AppointmentCanceledEvent.status:type_name -> hadron.places.v1.AppointmentStatus
	6,  // 8: hadron.places.v1.AppointmentCanceledEvent.cancel_time:type_name -> google.protobuf.Timestamp
	6,  // 9: hadron.places.v1.AppointmentRescheduledEvent.scheduled_time:type_name -> google.protobuf.Timestamp
	7,  // 10: hadron.places.v1.AppointmentRescheduledEvent.status:type_name -> hadron.places.v1.AppointmentStatus
	6,  // 11: hadron.places.v1.AppointmentRescheduledEvent.reschedule_time:type_name -> google.protobuf.Timestamp
	6,  // 12: hadron.places.v1.AppointmentDeletedEvent.delete_time:type_name -> google.protobuf.Timestamp
	7,  // 13: hadron.places.v1.AppointmentCompletedEvent.status:type_name -> hadron.places.v1.AppointmentStatus
	6,  // 14: hadron.places.v1.AppointmentCompletedEvent.complete_time:type_name -> google.protobuf.Timestamp
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_hadron_places_v1_event_proto_init() }
func file_hadron_places_v1_event_proto_init() {
	if File_hadron_places_v1_event_proto != nil {
		return
	}
	file_hadron_places_v1_enum_proto_init()
	file_hadron_places_v1_event_proto_msgTypes[0].OneofWrappers = []any{}
	file_hadron_places_v1_event_proto_msgTypes[1].OneofWrappers = []any{}
	file_hadron_places_v1_event_proto_msgTypes[2].OneofWrappers = []any{}
	file_hadron_places_v1_event_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_hadron_places_v1_event_proto_rawDesc), len(file_hadron_places_v1_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hadron_places_v1_event_proto_goTypes,
		DependencyIndexes: file_hadron_places_v1_event_proto_depIdxs,
		MessageInfos:      file_hadron_places_v1_event_proto_msgTypes,
	}.Build()
	File_hadron_places_v1_event_proto = out.File
	file_hadron_places_v1_event_proto_goTypes = nil
	file_hadron_places_v1_event_proto_depIdxs = nil
}
