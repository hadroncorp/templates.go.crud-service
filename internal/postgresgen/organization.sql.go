// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: organization.sql

package postgresgen

import (
	"context"
	"database/sql"
	"time"
)

const createOrganization = `-- name: CreateOrganization :exec
INSERT INTO organizations (organization_id, name, create_time, create_by, last_update_time, last_update_by, row_version, is_deleted)
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateOrganizationParams struct {
	OrganizationID string
	Name           string
	CreateTime     time.Time
	CreateBy       string
	LastUpdateTime time.Time
	LastUpdateBy   string
	RowVersion     int64
	IsDeleted      bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, createOrganization,
		arg.OrganizationID,
		arg.Name,
		arg.CreateTime,
		arg.CreateBy,
		arg.LastUpdateTime,
		arg.LastUpdateBy,
		arg.RowVersion,
		arg.IsDeleted,
	)
	return err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations WHERE organization_id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, organizationID string) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, organizationID)
	return err
}

const deleteOrganizationByName = `-- name: DeleteOrganizationByName :exec
DELETE FROM organizations WHERE name = $1
`

func (q *Queries) DeleteOrganizationByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteOrganizationByName, name)
	return err
}

const existOrganizationByName = `-- name: ExistOrganizationByName :one
SELECT EXISTS(SELECT 1 FROM organizations WHERE name = $1 LIMIT 1)
`

func (q *Queries) ExistOrganizationByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, existOrganizationByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT organization_id, name, create_time, create_by, last_update_time, last_update_by, row_version, is_deleted FROM organizations WHERE organization_id = $1 LIMIT 1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, organizationID string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByID, organizationID)
	var i Organization
	err := row.Scan(
		&i.OrganizationID,
		&i.Name,
		&i.CreateTime,
		&i.CreateBy,
		&i.LastUpdateTime,
		&i.LastUpdateBy,
		&i.RowVersion,
		&i.IsDeleted,
	)
	return i, err
}

const hasMorePagesOrganizationList = `-- name: HasMorePagesOrganizationList :one
SELECT EXISTS(
    SELECT 1
    FROM organizations
    WHERE
        create_time > $1::timestamptz
    LIMIT 1
) AS has_next,
EXISTS(
    SELECT 1
    FROM organizations
    WHERE
        create_time < $2::timestamptz
    ORDER BY create_time DESC
    LIMIT 1
) AS has_prev
`

type HasMorePagesOrganizationListParams struct {
	CursorNext sql.NullTime
	CursorPrev sql.NullTime
}

type HasMorePagesOrganizationListRow struct {
	HasNext bool
	HasPrev bool
}

func (q *Queries) HasMorePagesOrganizationList(ctx context.Context, arg HasMorePagesOrganizationListParams) (HasMorePagesOrganizationListRow, error) {
	row := q.db.QueryRowContext(ctx, hasMorePagesOrganizationList, arg.CursorNext, arg.CursorPrev)
	var i HasMorePagesOrganizationListRow
	err := row.Scan(&i.HasNext, &i.HasPrev)
	return i, err
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT organization_id, name, create_time, create_by, last_update_time, last_update_by, row_version, is_deleted
FROM organizations
WHERE
    -- Optional is_deleted filter
    $1::boolean IS NULL OR is_deleted = $1::boolean
    AND (
        -- Optional page cursor
        $2::timestamptz IS NULL -- Ignore if no cursor
        OR ($3::boolean = true AND create_time > $2::timestamptz) -- Next page
        OR ($3::boolean = false AND create_time < $2::timestamptz) -- Previous page
    )
ORDER BY
    -- Order depends on direction
    CASE WHEN $3::boolean = true THEN create_time ELSE create_time END ASC
LIMIT CASE WHEN $4::int IS NULL THEN 100 ELSE $4 END
`

type ListOrganizationsParams struct {
	IsDeleted       sql.NullBool
	CursorValue     sql.NullTime
	IsCursorForward sql.NullBool
	PageSize        sql.NullInt32
}

func (q *Queries) ListOrganizations(ctx context.Context, arg ListOrganizationsParams) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizations,
		arg.IsDeleted,
		arg.CursorValue,
		arg.IsCursorForward,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.OrganizationID,
			&i.Name,
			&i.CreateTime,
			&i.CreateBy,
			&i.LastUpdateTime,
			&i.LastUpdateBy,
			&i.RowVersion,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :exec
UPDATE organizations
SET
    name = $2,
    last_update_time = $3,
    last_update_by = $4,
    row_version = $5,
    is_deleted = $6
WHERE organization_id = $1
`

type UpdateOrganizationParams struct {
	OrganizationID string
	Name           string
	LastUpdateTime time.Time
	LastUpdateBy   string
	RowVersion     int64
	IsDeleted      bool
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, updateOrganization,
		arg.OrganizationID,
		arg.Name,
		arg.LastUpdateTime,
		arg.LastUpdateBy,
		arg.RowVersion,
		arg.IsDeleted,
	)
	return err
}
