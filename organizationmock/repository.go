// Code generated by MockGen. DO NOT EDIT.
// Source: organization/repository.go
//
// Generated by this command:
//
//	mockgen -source=organization/repository.go -destination=organizationmock/repository.go -package=organizationmock
//

// Package organizationmock is a generated GoMock package.
package organizationmock

import (
	context "context"
	reflect "reflect"

	paging "github.com/hadroncorp/geck/persistence/paging"
	organization "github.com/hadroncorp/service-template/organization"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, entity organization.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, entity)
}

// DeleteByKey mocks base method.
func (m *MockRepository) DeleteByKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByKey indicates an expected call of DeleteByKey.
func (mr *MockRepositoryMockRecorder) DeleteByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKey", reflect.TypeOf((*MockRepository)(nil).DeleteByKey), ctx, key)
}

// ExistsByName mocks base method.
func (m *MockRepository) ExistsByName(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByName", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByName indicates an expected call of ExistsByName.
func (mr *MockRepositoryMockRecorder) ExistsByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByName", reflect.TypeOf((*MockRepository)(nil).ExistsByName), ctx, name)
}

// FindByKey mocks base method.
func (m *MockRepository) FindByKey(ctx context.Context, key string) (*organization.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", ctx, key)
	ret0, _ := ret[0].(*organization.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockRepositoryMockRecorder) FindByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockRepository)(nil).FindByKey), ctx, key)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, entity organization.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, entity)
}

// MockReadRepository is a mock of ReadRepository interface.
type MockReadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReadRepositoryMockRecorder
	isgomock struct{}
}

// MockReadRepositoryMockRecorder is the mock recorder for MockReadRepository.
type MockReadRepositoryMockRecorder struct {
	mock *MockReadRepository
}

// NewMockReadRepository creates a new mock instance.
func NewMockReadRepository(ctrl *gomock.Controller) *MockReadRepository {
	mock := &MockReadRepository{ctrl: ctrl}
	mock.recorder = &MockReadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadRepository) EXPECT() *MockReadRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockReadRepository) FindAll(ctx context.Context, opts ...organization.ListOption) (*paging.Page[organization.Organization], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAll", varargs...)
	ret0, _ := ret[0].(*paging.Page[organization.Organization])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockReadRepositoryMockRecorder) FindAll(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockReadRepository)(nil).FindAll), varargs...)
}

// FindByKey mocks base method.
func (m *MockReadRepository) FindByKey(ctx context.Context, key string) (*organization.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", ctx, key)
	ret0, _ := ret[0].(*organization.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockReadRepositoryMockRecorder) FindByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockReadRepository)(nil).FindByKey), ctx, key)
}
